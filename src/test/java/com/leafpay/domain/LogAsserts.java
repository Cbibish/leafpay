package com.leafpay.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLogAllPropertiesEquals(Log expected, Log actual) {
        assertLogAutoGeneratedPropertiesEquals(expected, actual);
        assertLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLogAllUpdatablePropertiesEquals(Log expected, Log actual) {
        assertLogUpdatableFieldsEquals(expected, actual);
        assertLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLogAutoGeneratedPropertiesEquals(Log expected, Log actual) {
        assertThat(actual)
            .as("Verify Log auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLogUpdatableFieldsEquals(Log expected, Log actual) {
        assertThat(actual)
            .as("Verify Log relevant properties")
            .satisfies(a -> assertThat(a.getAction()).as("check action").isEqualTo(expected.getAction()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getIpUtilisateur()).as("check ipUtilisateur").isEqualTo(expected.getIpUtilisateur()))
            .satisfies(a -> assertThat(a.getResultat()).as("check resultat").isEqualTo(expected.getResultat()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLogUpdatableRelationshipsEquals(Log expected, Log actual) {
        assertThat(actual)
            .as("Verify Log relationships")
            .satisfies(a -> assertThat(a.getUtilisateur()).as("check utilisateur").isEqualTo(expected.getUtilisateur()));
    }
}
