package com.leafpay.domain;

import static com.leafpay.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class CompteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteAllPropertiesEquals(Compte expected, Compte actual) {
        assertCompteAutoGeneratedPropertiesEquals(expected, actual);
        assertCompteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteAllUpdatablePropertiesEquals(Compte expected, Compte actual) {
        assertCompteUpdatableFieldsEquals(expected, actual);
        assertCompteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteAutoGeneratedPropertiesEquals(Compte expected, Compte actual) {
        assertThat(actual)
            .as("Verify Compte auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteUpdatableFieldsEquals(Compte expected, Compte actual) {
        assertThat(actual)
            .as("Verify Compte relevant properties")
            .satisfies(a -> assertThat(a.getTypeCompte()).as("check typeCompte").isEqualTo(expected.getTypeCompte()))
            .satisfies(a -> assertThat(a.getSolde()).as("check solde").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getSolde()))
            .satisfies(a ->
                assertThat(a.getPlafondTransaction())
                    .as("check plafondTransaction")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPlafondTransaction())
            )
            .satisfies(a ->
                assertThat(a.getLimiteRetraitsMensuels()).as("check limiteRetraitsMensuels").isEqualTo(expected.getLimiteRetraitsMensuels())
            )
            .satisfies(a ->
                assertThat(a.getTauxInteret())
                    .as("check tauxInteret")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTauxInteret())
            )
            .satisfies(a -> assertThat(a.getDateOuverture()).as("check dateOuverture").isEqualTo(expected.getDateOuverture()))
            .satisfies(a -> assertThat(a.getDateFermeture()).as("check dateFermeture").isEqualTo(expected.getDateFermeture()))
            .satisfies(a -> assertThat(a.getStatut()).as("check statut").isEqualTo(expected.getStatut()))
            .satisfies(a -> assertThat(a.getIban()).as("check iban").isEqualTo(expected.getIban()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCompteUpdatableRelationshipsEquals(Compte expected, Compte actual) {
        // empty method
    }
}
