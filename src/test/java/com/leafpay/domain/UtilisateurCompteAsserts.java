package com.leafpay.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UtilisateurCompteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurCompteAllPropertiesEquals(UtilisateurCompte expected, UtilisateurCompte actual) {
        assertUtilisateurCompteAutoGeneratedPropertiesEquals(expected, actual);
        assertUtilisateurCompteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurCompteAllUpdatablePropertiesEquals(UtilisateurCompte expected, UtilisateurCompte actual) {
        assertUtilisateurCompteUpdatableFieldsEquals(expected, actual);
        assertUtilisateurCompteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurCompteAutoGeneratedPropertiesEquals(UtilisateurCompte expected, UtilisateurCompte actual) {
        assertThat(actual)
            .as("Verify UtilisateurCompte auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurCompteUpdatableFieldsEquals(UtilisateurCompte expected, UtilisateurCompte actual) {
        assertThat(actual)
            .as("Verify UtilisateurCompte relevant properties")
            .satisfies(a ->
                assertThat(a.getRoleUtilisateurSurCeCompte())
                    .as("check roleUtilisateurSurCeCompte")
                    .isEqualTo(expected.getRoleUtilisateurSurCeCompte())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUtilisateurCompteUpdatableRelationshipsEquals(UtilisateurCompte expected, UtilisateurCompte actual) {
        assertThat(actual)
            .as("Verify UtilisateurCompte relationships")
            .satisfies(a -> assertThat(a.getUtilisateur()).as("check utilisateur").isEqualTo(expected.getUtilisateur()))
            .satisfies(a -> assertThat(a.getCompte()).as("check compte").isEqualTo(expected.getCompte()));
    }
}
