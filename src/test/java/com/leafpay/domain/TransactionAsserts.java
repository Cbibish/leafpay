package com.leafpay.domain;

import static com.leafpay.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransactionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllPropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionAutoGeneratedPropertiesEquals(expected, actual);
        assertTransactionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAllUpdatablePropertiesEquals(Transaction expected, Transaction actual) {
        assertTransactionUpdatableFieldsEquals(expected, actual);
        assertTransactionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionAutoGeneratedPropertiesEquals(Transaction expected, Transaction actual) {
        assertThat(actual)
            .as("Verify Transaction auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableFieldsEquals(Transaction expected, Transaction actual) {
        assertThat(actual)
            .as("Verify Transaction relevant properties")
            .satisfies(a ->
                assertThat(a.getMontant()).as("check montant").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getMontant())
            )
            .satisfies(a -> assertThat(a.getTypeTransaction()).as("check typeTransaction").isEqualTo(expected.getTypeTransaction()))
            .satisfies(a -> assertThat(a.getDateTransaction()).as("check dateTransaction").isEqualTo(expected.getDateTransaction()))
            .satisfies(a -> assertThat(a.getStatut()).as("check statut").isEqualTo(expected.getStatut()))
            .satisfies(a -> assertThat(a.getMoyenValidation()).as("check moyenValidation").isEqualTo(expected.getMoyenValidation()))
            .satisfies(a -> assertThat(a.getJustificatif()).as("check justificatif").isEqualTo(expected.getJustificatif()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransactionUpdatableRelationshipsEquals(Transaction expected, Transaction actual) {
        assertThat(actual)
            .as("Verify Transaction relationships")
            .satisfies(a -> assertThat(a.getCompteSource()).as("check compteSource").isEqualTo(expected.getCompteSource()))
            .satisfies(a -> assertThat(a.getCompteDestination()).as("check compteDestination").isEqualTo(expected.getCompteDestination()));
    }
}
